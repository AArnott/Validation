parameters:
  RunTests:

steps:

  # We use msbuild instead of dotnet build because only msbuild can build net35 targeted projects.
- task: VSBuild@1
  displayName: ðŸ›  Build Visual Studio solution
  inputs:
    msbuildArgs: /t:build,pack -warnAsError -warnNotAsError:NU1901,NU1902,NU1903,NU1904 /bl:"$(Build.ArtifactStagingDirectory)/build_logs/msbuild.binlog"
    configuration: $(BuildConfiguration)
  env:
    SYSTEM_ACCESSTOKEN: $(System.AccessToken)
  condition: and(succeeded(), eq(variables['Agent.OS'], 'Windows_NT'))

- powershell: azure-pipelines/dotnet-test-cloud.ps1 -Configuration $(BuildConfiguration) -Agent $(Agent.JobName) -PublishResults
  displayName: ðŸ§ª dotnet test
  condition: and(succeeded(), ${{ parameters.RunTests }})

- powershell: azure-pipelines/variables/_pipelines.ps1
  failOnStderr: true
  displayName: âš™ Update pipeline variables based on build outputs
  condition: succeededOrFailed()

- powershell: azure-pipelines/artifacts/_pipelines.ps1 -ArtifactNameSuffix "-$(Agent.JobName)" -Verbose
  failOnStderr: true
  displayName: ðŸ“¢ Publish artifacts
  condition: succeededOrFailed()

- ${{ if and(ne(variables['codecov_token'], ''), parameters.RunTests) }}:
  - powershell: |
      $ArtifactStagingFolder = & "azure-pipelines/Get-ArtifactsStagingDirectory.ps1"
      $CoverageResultsFolder = Join-Path $ArtifactStagingFolder "coverageResults-$(Agent.JobName)"
      azure-pipelines/publish-CodeCov.ps1 -CodeCovToken "$(codecov_token)" -PathToCodeCoverage "$CoverageResultsFolder" -Name "$(Agent.JobName) Coverage Results" -Flags "$(Agent.JobName)"
    displayName: ðŸ“¢ Publish code coverage results to codecov.io
    timeoutInMinutes: 3
    continueOnError: true
